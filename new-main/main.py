import asyncio
import sqlite3
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from database_handler import db_manager
from datetime import datetime
import pytz  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token='8179070735:AAFcGnoamLRMBBbvXCnsA6otC6xxIOY8pY0')
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_chats = set()

# –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_chats.add(message.chat.id)
    print(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {message.chat.id} ({message.chat.first_name})")
    await message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.")

# –ö–æ–º–∞–Ω–¥–∞ /stop –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@dp.message(Command("stop"))
async def stop_command(message: types.Message):
    if message.chat.id in user_chats:
        user_chats.remove(message.chat.id)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è: {message.chat.id}")
        await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await message.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

# –ö–æ–º–∞–Ω–¥–∞ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
@dp.message(Command("status"))
async def status_command(message: types.Message):
    status = "–ø–æ–¥–ø–∏—Å–∞–Ω" if message.chat.id in user_chats else "–Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
    await message.answer(f"–í—ã {status} –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(user_chats)}")

# –ö–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö
/stop - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/applications - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)

üìã –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö —Å —Å–∞–π—Ç–∞.
"""
    await message.answer(help_text)

# –ö–æ–º–∞–Ω–¥–∞ /applications –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
@dp.message(Command("applications"))
async def applications_command(message: types.Message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # –ù–∞–ø—Ä–∏–º–µ—Ä, if message.chat.id != ADMIN_ID: return
    
    try:
        applications = db_manager.get_applications()
        
        if not applications:
            await message.answer("–ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        recent_apps = applications[:5]
        
        response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
        for app in recent_apps:
            app_id, first_name, last_name, phone, service_type, other_service, submission_date, notified = app
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ UTC –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç SQLite)
                utc_time = datetime.strptime(submission_date, "%Y-%m-%d %H:%M:%S")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC
                utc_time = utc_time.replace(tzinfo=pytz.utc)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                moscow_tz = pytz.timezone('Europe/Moscow')
                local_time = utc_time.astimezone(moscow_tz)
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                formatted_time = local_time.strftime("%d.%m.%Y %H:%M:%S")
            except:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ
                formatted_time = submission_date
            
            response += f"#{app_id}: {first_name} {last_name}\n"
            response += f"üìû {phone}\n"
            response += f"üéØ {service_type}\n"
            if other_service:
                response += f"üìù {other_service}\n"
            response += f"‚è∞ {formatted_time}\n\n"
        
        if len(applications) > 5:
            response += f"... –∏ –µ—â–µ {len(applications) - 5} –∑–∞—è–≤–æ–∫.\n\n"
            
        response += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥."
        
        await message.answer(response)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö
async def send_new_applications():
    print("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫...")
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            applications = db_manager.get_unnotified_applications()
            
            if applications:
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(applications)} –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
            
            for app in applications:
                app_id, first_name, last_name, phone, service_type, other_service, submission_date, notified = app
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ UTC –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
                try:
                    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    utc_time = datetime.strptime(submission_date, "%Y-%m-%d %H:%M:%S")
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC
                    utc_time = utc_time.replace(tzinfo=pytz.utc)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                    moscow_tz = pytz.timezone('Europe/Moscow')
                    local_time = utc_time.astimezone(moscow_tz)
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    formatted_time = local_time.strftime("%d.%m.%Y %H:%M:%S")
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ
                    formatted_time = submission_date
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_text = f"""
üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app_id}

üë§ –ò–º—è: {first_name} {last_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üéØ –£—Å–ª—É–≥–∞: {service_type}
{"üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: " + other_service if other_service else ""}
‚è∞ –î–∞—Ç–∞: {formatted_time} (–ú–°–ö)
                """
                
                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ #{app_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                if not user_chats:
                    print("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
                for chat_id in user_chats:
                    try:
                        await bot.send_message(chat_id, message_text)
                        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
                
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞—è–≤–∫—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                db_manager.mark_as_notified(app_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(5)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ send_new_applications: {e}")
            await asyncio.sleep(10)

async def main():
    print("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print("–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    asyncio.create_task(send_new_applications())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
    finally:
        db_manager.close()